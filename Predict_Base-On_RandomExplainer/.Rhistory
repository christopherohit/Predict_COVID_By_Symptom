"sultry",
"sputum",
"vomit",
"diarrhea",
"distress",
"Class"
)
data_frame$Class = data_frame$Class %>% recode_factor(., `SAR-COVID2 atypical symptoms` = "SAR_Covid_2" ,
`Acute respiratory pneumonia- Typhoid Infection` = "viem_Phoi",
`Atypical cold symptoms` = "Cam")
library(caret)
set.seed(1234)
idtest = caret::createDataPartition(y = data_frame$Class,p = 800/1000,list = FALSE)
trainset = data_frame[idtest,]
testset = data_frame[-idtest,]
library(randomForest)
trainset$Class = factor(trainset$Class)
rfmod = randomForest(Class~.,
data=trainset,
ntree=700,
mtry = sqrt(11),
replace=TRUE,
localImp=TRUE
)
rfmod
library(tidyverse)
library(tibble)
library(summarytools)
library(readr)
library(explore)
library(dataMaid)
setwd("C:/Users/Hendrich/Desktop/Professional Internship/Predict_Base-On_RandomExplainer")
my_theme <- function(base_size =8, base_family = "Time new roman"){
theme_bw(base_size = base_size, base_family = base_family) +
theme(
panel.grid.major = element_line(color = "purple"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = NA),
strip.background = element_rect(fill = "#001d60", color = "#00113a", size =0.5),
strip.text = element_text(face = "bold", size = 8, color = "white"),
legend.position = "bottom",
legend.justification = "center",
legend.background = element_blank()
)
}
theme_set(my_theme())
theme_bare <- function(base_size=8,base_family="Time new roman"){theme_bw(base_size = base_size, base_family = base_family)+
theme(
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = unit(c(0,0,0,0), "lines")
)
}
data_frame <- read.csv("WuhanVirus2.csv")
names(data_frame) = c("Cough",
"Fever",
"snivel",
"stuffy_nose",
"sneezing",
"sore_throat",
"sultry",
"sputum",
"vomit",
"diarrhea",
"distress",
"Class"
)
data_frame$Class = data_frame$Class %>% recode_factor(., `SAR-COVID2 atypical symptoms` = "SAR_Covid_2" ,
`Acute respiratory pneumonia- Typhoid Infection` = "viem_Phoi",
`Atypical cold symptoms` = "Cam")
library(caret)
set.seed(1234)
idtest = caret::createDataPartition(y = data_frame$Class,p = 800/1000,list = FALSE)
trainset = data_frame[idtest,]
testset = data_frame[-idtest,]
library(randomForest)
trainset$Class = factor(trainset$Class)
rfmod = randomForest(Class~.,
data=trainset,
ntree=700,
mtry = sqrt(11),
replace=TRUE,
localImp=TRUE
)
rfmod
testpred = predict(rfmod, testset)
testset$Class = as.factor(testset$Class)
confusionMatrix(factor(testpred),
reference = testset$Class,
# positive = "SAR_Covid_2",
mode = "everything")
plot(rfmod,
main = "Duong_Cong_Hoc_Tap_RF")
legend("topright",
c("error for 'SAR'",
"misclassification error",
"error for 'Cam'"),
lty = c(1,1,1),
col = c("green" , "black" , "red"))
rfmod = randomForest(Class~.,
data=trainset,
ntree=500,
mtry = sqrt(11),
replace=TRUE,
localImp=TRUE
)
rfmod
rfmod = randomForest(Class~.,
data=trainset,
ntree=750,
mtry = sqrt(11),
replace=TRUE,
localImp=TRUE
)
rfmod
rfmod = randomForest(Class~.,
data=trainset,
ntree=700,
mtry = sqrt(11),
replace=TRUE,
localImp=TRUE
)
rfmod
testpred = predict(rfmod, testset)
testset$Class = as.factor(testset$Class)
confusionMatrix(factor(testpred),
reference = testset$Class,
# positive = "SAR_Covid_2",
mode = "everything")
plot(rfmod,
main = "Duong_Cong_Hoc_Tap_RF")
plot(rfmod,
main = "Duong_Cong_Hoc_Tap_RF")
confusionMatrix(factor(testpred),
reference = testset$Class,
# positive = "SAR_Covid_2",
mode = "everything")
plot(rfmod,
main = "Duong_Cong_Hoc_Tap_RF")
legend("topright",
c("error for 'Am Tinh'",
"Average misclassification error",
"error for 'Duong Tinh'"),
lty = c(1,1,1),
col = c("green" , "black" , "red"))
varImpPlot(rfmod)
varImp(rfmod)%>%as.data.frame()%>%
mutate(Feature=rownames(.))%>%
gather(viem_Phoi,SAR_Covid_2,key="Label",value="Importance")%>%
mutate(Importance=100*Importance/max(.$Importance))%>%
ggplot(aes(x=reorder(Feature,Importance),
y=Importance,
fill=Importance,
color=Importance))+
geom_segment(aes(x=reorder(Feature,Importance),
xend=Feature,
y=0,
yend=Importance),
size=1,
show.legend = F)+
geom_point(size=2,show.legend = F)+
scale_x_discrete("Features")+
coord_flip()+
scale_fill_gradient(low="blue",high="red")+
scale_color_gradient(low="blue",high="red")+
geom_text(aes(label = round(Importance,1)),
vjust=-0.5,size=3)+
facet_wrap(~Label,ncol=2,scales="free")+
theme_bw(base_family = "mono",8)
library(randomForestExplainer)
View(data_frame)
varImp(rfmod)%>%as.data.frame()%>%
mutate(Feature=rownames(.))%>%
gather("Am Tinh","Duong Tinh",key="Label",value="Importance")%>%
mutate(Importance=100*Importance/max(.$Importance))%>%
ggplot(aes(x=reorder(Feature,Importance),
y=Importance,
fill=Importance,
color=Importance))+
geom_segment(aes(x=reorder(Feature,Importance),
xend=Feature,
y=0,
yend=Importance),
size=1,
show.legend = F)+
geom_point(size=2,show.legend = F)+
scale_x_discrete("Features")+
coord_flip()+
scale_fill_gradient(low="blue",high="red")+
scale_color_gradient(low="blue",high="red")+
geom_text(aes(label = round(Importance,1)),
vjust=-0.5,size=3)+
facet_wrap(~Label,ncol=2,scales="free")+
theme_bw(base_family = "mono",8)
library(randomForestExplainer)
# display 7 var important
rfmod %>%
important_variables(k = 7, ties_action = "draw")
rfmod %>% measure_importance(mean_sample = "relevant_trees") %>%
as_tibble() ->vimdf
vimdf %>% head()
vimdf %>% gather(mean_min_depth: p_value,
key = "Metric",
value = "Value") %>%
ggplot(aes(x = reorder(variable,Value),
y = Value,
fill = Metric,
color= Metric)) +
geom_segment(aes(x = reorder(variable, Value),
xend = variable,
y = 0,
yend = Value),
size = 1,
show.legend = FALSE)+
geom_point(size = 2, show.legend = FALSE)+
scale_x_discrete("Features") +
coord_flip() +
facet_wrap(~Metric, ncol = 4 , scale = "free")+
theme_bw(base_family = "Arial", 8)
plot_importance_ggpairs(vimdf)
plot_importance_rankings(vimdf)
library(GGally)
DrawSyntax <- function(data,mapping){
p <- ggplot(data = data , mapping = mapping)+
geom_point(aes(fill = rownames(data),
color= rownames(data)),
shape = 21 , size = 2,
alpha = 0.8,
show.legend = FALSE)+
geom_line(aes(color=rownames(data),
group = 1))+
theme_bw(base_family = "Arial",8)
p
}
plotfuncmid <- function(data,mapping){
p <- ggplot(data = data, mapping = mapping)+
geom_histogram(aes(fill = rownames(data),
color = rownames(data)),
alpha = 0.5)+
theme_bw(base_family = "Arial",8)
p
}
library(ggplot2)
ggpairs(vimdf,columns=2:8,
lower=list(continuous=DrawSyntax()),
diag=list(continuous=plotfuncmid))
mindepthdf = rfmod %>% min_depth_distribution() %>% as_tibble()
mindepthdf %>% ggplot(aes(x = minimal_depth,
fill = variable,
col= variable)) +
geom_histogram(alpha=0.5) +
facet_wrap(~variable, ncol = 3, scales = "free") +
my_theme()
#
rlang::last_error()
rfmod %>% min_depth_distribution() %>%
plot_min_depth_distribution(mean_sample = "all_trees") +
scale_fill_brewer(palette = "Spectral", direction = -1)
library(h2o)
library(tidyverse)
library(tibble)
library(explore)
library(dataMaid)
library(summarytools)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
library(rJava)
setwd("C:/Users/Hendrich/Desktop/Professional Internship/Death")
library(keras)
library(dplyr)
require(foreign)
require(farff)
library(ggplot2)
library(tidyr)
df=read.arff("Death.arff")
View(df)
names(df)=c("Level","FVC","FEV1","Zubrod",
"Pain","Haemoptysis","Sultry","Cough","Weakness",
"T_grade","DBtype2","MI","PAD","Smoking","Asthma","Age","Survival")
View(df)
View(df)
View(df)
df$Survival=df$Survival%>%recode_factor(.,`F` = "Survived", `T` = "Dead")
View(df)
df$Tiffneau=df$FEV1/df$FVC
View(df)
View(df)
Hmisc::describe(df)
View(df)
idTrain=caret::createDataPartition(y=df$Survival,p=410/470,list=FALSE)
trainset=df[idTrain,]
testset=df[-idTrain,]
View(trainset)
View(testset)
trainsset=df[idTrain,]
testsset=df[-idTrain,]
remove(testsset)
remove(trainsset)
View(trainset)
testset = subset(testset , select = -c(Survival))
View(testset)
library(h2o)
h2o.init(nthreads = -1,max_mem_size ="1g")
library(h2o)
h2o.init(nthreads = -1,max_mem_size ="1g")
wtrain=as.h2o(trainset)
wtest=as.h2o(testset)
response="Survival"
features=setdiff(colnames(wtrain),response)
# Balance Class and Stratifield
rfmod1=h2o.randomForest(x = features,
y = response,
training_frame = wtrain,nfolds=10,
fold_assignment = "Stratified",
balance_classes = TRUE,class_sampling_factors=c(1.17,6.66),
ntrees = 200, max_depth = 50,
stopping_metric = "logloss",
stopping_tolerance = 0.01,
stopping_rounds = 3,
keep_cross_validation_fold_assignment = TRUE,
keep_cross_validation_predictions=TRUE,
score_each_iteration = TRUE,
seed=12345)
h2o.performance(rfmod1,wtrain)
h2o.performance(rfmod1,wtest)
testset=df[-idTrain,]
wtest=as.h2o(testset)
features=setdiff(colnames(wtrain),response)
# Balance Class and Stratifield
rfmod1=h2o.randomForest(x = features,
y = response,
training_frame = wtrain,nfolds=10,
fold_assignment = "Stratified",
balance_classes = TRUE,class_sampling_factors=c(1.17,6.66),
ntrees = 300, max_depth = 50,
stopping_metric = "logloss",
stopping_tolerance = 0.01,
stopping_rounds = 3,
keep_cross_validation_fold_assignment = TRUE,
keep_cross_validation_predictions=TRUE,
score_each_iteration = TRUE,
seed=12345)
h2o.performance(rfmod1,wtrain)
h2o.performance(rfmod1,wtest)
#Balance + Not Stratifieds
rfmod2 = h2o.randomForest(x = features,
y = response,
training_frame = wtrain, nfolds = 10,
fold_assignment = "AUTO",class_sampling_factors=c(1.17,6.66),
ntrees = 100,max_depth = 50,sample_rate=0.5,mtries=4,
balance_classes = TRUE,
stopping_metric = "mean_per_class_error",
stopping_tolerance = 0.001,
stopping_rounds = 3,
keep_cross_validation_fold_assignment = F,
keep_cross_validation_predictions=F,
score_each_iteration = TRUE,
seed=12345)
rfmod3 = h2o.randomForest(x = features,
y = response,
training_frame =  wtrain, nfolds = 10,
fold_assignment = "Stratified",
ntrees = 100,max_depth = 50,sample_rate=0.5,mtries=4,
balance_classes = FALSE,
stopping_metric = "mean_per_class_error",
stopping_tolerance = 0.001,
stopping_rounds = 3,
keep_cross_validation_fold_assignment = F,
keep_cross_validation_predictions=F,
score_each_iteration = TRUE,
seed=12345)
rfmod4 = h2o.randomForest(x = features,
y = response,
training_frame = wtrain,nfolds=10,
balance_classes = F,
ntrees = 100, max_depth = 50,
stopping_metric = "logloss",
stopping_tolerance = 0.01,
stopping_rounds = 3,
keep_cross_validation_fold_assignment = TRUE,
keep_cross_validation_predictions=TRUE,
score_each_iteration = TRUE,
seed=12345)
h2o.performance(rfmod2 , wtrain)
h2o.performance(rfmod2 , wtest)
h2o.performance(rfmod1,wtest)
h2o.performance(rfmod3 , wtest)
h2o.performance(rfmod4 , wtest)
h2o.cluster_sizes(rfmod1, wtrain)
h2o.cluster_sizes(wtrain)
h2o.performance(rfmod2 , wtest)
h2o.performance(rfmod1,wtest)
h2o.performance(rfmod3 , wtest)
h2o.performance(rfmod2 , wtest)
library(tidyverse)
library(tibble)
library(summarytools)
library(readr)
library(explore)
library(tidyverse)
library(dataMaid)
setwd("C:/Users/Hendrich/Desktop/Professional Internship/Predict_Base-On_RandomExplainer")
my_theme <- function(base_size =8, base_family = "Time new roman"){
theme_bw(base_size = base_size, base_family = base_family) +
theme(
panel.grid.major = element_line(color = "purple"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = NA),
strip.background = element_rect(fill = "#001d60", color = "#00113a", size =0.5),
strip.text = element_text(face = "bold", size = 8, color = "white"),
legend.position = "bottom",
legend.justification = "center",
legend.background = element_blank()
)
}
theme_set(my_theme())
theme_bare <- function(base_size=8,base_family="Time new roman"){theme_bw(base_size = base_size, base_family = base_family)+
theme(
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = unit(c(0,0,0,0), "lines")
)
}
data_frame <- read.csv("WuhanVirus2.csv")
View(data_frame)
view(dfSummary(data_frame))
names(data_frame) = c("Cough",
"Fever",
"snivel",
"stuffy_nose",
"sneezing",
"sore_throat",
"sultry",
"sputum",
"vomit",
"diarrhea",
"distress",
"Class"
)
data_frame$Class = data_frame$Class %>% recode_factor(., `SAR-COVID2 atypical symptoms` = "SAR_Covid_2" ,
`Acute respiratory pneumonia- Typhoid Infection` = "viem_Phoi",
`Atypical cold symptoms` = "Cam")
library(caret)
set.seed(1234)
idtest = caret::createDataPartition(y = data_frame$Class,p = 800/1000,list = FALSE)
trainset = data_frame[idtest,]
testset = data_frame[-idtest,]
library(randomForest)
trainset$Class = factor(trainset$Class)
library(tidyverse)
library(tibble)
library(summarytools)
library(readr)
library(explore)
library(dataMaid)
setwd("C:/Users/Hendrich/Desktop/Professional Internship/Predict_Base-On_RandomExplainer")
my_theme <- function(base_size =8, base_family = "Time new roman"){
theme_bw(base_size = base_size, base_family = base_family) +
theme(
panel.grid.major = element_line(color = "purple"),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = NA),
strip.background = element_rect(fill = "#001d60", color = "#00113a", size =0.5),
strip.text = element_text(face = "bold", size = 8, color = "white"),
legend.position = "bottom",
legend.justification = "center",
legend.background = element_blank()
)
}
theme_set(my_theme())
theme_bare <- function(base_size=8,base_family="Time new roman"){theme_bw(base_size = base_size, base_family = base_family)+
theme(
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = unit(c(0,0,0,0), "lines")
)
}
data_frame <- read.csv("WuhanVirus2.csv")
View(data_frame)
makeDataReport(data_frame,
render = FALSE,
file = "EDA.Rmd",
replace = TRUE)
library(readr)
WuhanVirus <- read_csv("WuhanVirus.csv")
View(WuhanVirus)
