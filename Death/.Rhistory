explanation <-lime::explain(testset[,-17], explainer, labels="Dead", n_features = 10,feature_select="auto")
exdf%>%
ggplot(aes(x=reorder(case,feature_weight),y=feature_desc,fill=feature_weight,col=feature_weight))+
geom_tile(show.legend=F)+
scale_fill_gradient2(low="red4",mid="white",high="green4",midpoint = 0.0)+
scale_color_gradient2(low="red",mid="grey",high="green",midpoint = 0.0)+
theme_bw()+
theme(axis.text.x=element_blank())+
facet_wrap(~Class,shrink=T,scale="free")
library(gglot2)
exdf%>%
ggplot(aes(x=reorder(case,feature_weight),y=feature_desc,fill=feature_weight,col=feature_weight))+
geom_tile(show.legend=F)+
scale_fill_gradient2(low="red4",mid="white",high="green4",midpoint = 0.0)+
scale_color_gradient2(low="red",mid="grey",high="green",midpoint = 0.0)+
theme_bw()+
theme(axis.text.x=element_blank())+
facet_wrap(~Class,shrink=T,scale="free")
library(ggplot2)
exdf%>%
ggplot(aes(x=reorder(case,feature_weight),y=feature_desc,fill=feature_weight,col=feature_weight))+
geom_tile(show.legend=F)+
scale_fill_gradient2(low="red4",mid="white",high="green4",midpoint = 0.0)+
scale_color_gradient2(low="red",mid="grey",high="green",midpoint = 0.0)+
theme_bw()+
theme(axis.text.x=element_blank())+
facet_wrap(~Class,shrink=T,scale="free")
$exdf%>%
ggplot(aes(x=reorder(case,feature_weight),y=feature_desc,fill=feature_weight,col=feature_weight))+
geom_tile(show.legend=F)+
scale_fill_gradient2(low="red4",mid="white",high="green4",midpoint = 0.0)+
scale_color_gradient2(low="red",mid="grey",high="green",midpoint = 0.0)+
theme_bw()+
theme(axis.text.x=element_blank())+
facet_wrap(~Class,shrink=T,scale="free")
exdf%>%
ggplot2(aes(x=reorder(case,feature_weight),y=feature_desc,fill=feature_weight,col=feature_weight))+
geom_tile(show.legend=F)+
scale_fill_gradient2(low="red4",mid="white",high="green4",midpoint = 0.0)+
scale_color_gradient2(low="red",mid="grey",high="green",midpoint = 0.0)+
theme_bw()+
theme(axis.text.x=element_blank())+
facet_wrap(~Class,shrink=T,scale="free")
explanation <-lime::explain(testset[,-17], explainer, labels="Dead", n_features = 10,feature_select="auto")
exdf=explanation%>%as_tibble()
exdf$Class=ifelse(exdf$label_prob>=0.5,"Dead","Survived")
library(ggplot2)
exdf%>%
ggplot((aes(x=reorder(case,feature_weight),y=feature_desc,fill=feature_weight,col=feature_weight))+
geom_tile(show.legend=F)+
scale_fill_gradient2(low="red4",mid="white",high="green4",midpoint = 0.0)+
scale_color_gradient2(low="red",mid="grey",high="green",midpoint = 0.0)+
theme_bw()+
theme(axis.text.x=element_blank())+
facet_wrap(~Class,shrink=T,scale="free"))
library(tidyverse)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
library(rJava)
require(foreign)
require(farff)
df=read.arff("https://archive.ics.uci.edu/ml/machine-learning-databases/00277/ThoraricSurgery.arff")
names(df)=c("Diagnosis","FVC","FEV1","Zubrod","Pain","Haemoptysis","Dyspnoea","Cough","Weakness","T_grade","DBtype2","MI","PAD","Smoking","Asthma","Age","Survival")
df$Survival=df$Survival%>%recode_factor(.,`F` = "Survived", `T` = "Dead")
df$Tiffneau=df$FEV1/df$FVC
library(caret)
set.seed(123)
idTrain=caret::createDataPartition(y=df$Survival,p=410/470,list=FALSE)
trainset=df[idTrain,]
testset=df[-idTrain,]
library(h2o)
h2o.init(nthreads = -1,max_mem_size ="4g")
wtrain=as.h2o(trainset)
wtest=as.h2o(testset)
response="Survival"
features=setdiff(colnames(wtrain),response)
rfmod=h2o.randomForest(x = features,
y = response,
training_frame = wtrain,nfolds=10,
fold_assignment = "Stratified",
ntrees = 200, max_depth = 50,sample_rate=0.5,mtries=4,
balance_classes = FALSE,
stopping_metric = "mean_per_class_error",
stopping_tolerance = 0.001,
stopping_rounds = 3,
keep_cross_validation_fold_assignment = F,
keep_cross_validation_predictions=F,
score_each_iteration = TRUE,
seed=12345)
h2o.performance(rfmod,wtrain)
h2o.performance(rfmod,wtest)
library(lime)
model_type.H2OModel<- function(x, ...) "classification"
predict_model.H2OModel <- function(x, newdata, type, ...) {
pred <- h2o.predict(x, as.h2o(newdata))
return(as.data.frame(pred[,-1]))
}
set.seed(12345)
explainer <- lime(trainset[,-17], rfmod, bin_continuous = FALSE, n_bins = 10, n_permutations = 10000)
library(magrittr)
library(dplyr)
deaddf=subset(testset,Survival!="Survived")%>%.[,-17]
survdf=subset(testset,Survival=="Survived")%>%.[,-17]
require(caret)
caseS1<-lime::explain(survdf[15,], explainer, labels="Survived", n_features =10,feature_select="auto")
plot_features(caseS1)
dead1<-lime::explain(deaddf[c(1:4),], explainer, labels="Dead",
n_features =10,feature_select="auto")
plot_features(dead1)
dead2<- lime::explain(deaddf[22,], explainer, labels = "Dead",
n_features = 10 , feature_select = "auto")
plot_features((dead2))
explanation <-lime::explain(testset[,-17], explainer, labels="Dead", n_features = 10,feature_select="auto")
exdf=explanation%>%as_tibble()
exdf$Class=ifelse(exdf$label_prob>=0.5,"Dead","Survived")
library(ggplot2)
exdf%>%
ggplot((aes(x=reorder(case,feature_weight),y=feature_desc,fill=feature_weight,col=feature_weight))+
geom_tile(show.legend=F)+
scale_fill_gradient2(low="red4",mid="white",high="green4",midpoint = 0.0)+
scale_color_gradient2(low="red",mid="grey",high="green",midpoint = 0.0)+
theme_bw()+
theme(axis.text.x=element_blank())+
facet_wrap(~Class,shrink=T,scale="free"))
exdf=explanation%>%as_tibble()
exdf$Class=ifelse(exdf$label_prob>=0.5,"Dead","Survived")
exdf%>%
ggplot(aes(x=reorder(case,feature_weight),y=feature_desc,fill=feature_weight,col=feature_weight))+
geom_tile(show.legend=F)+
scale_fill_gradient2(low="red4",mid="white",high="green4",midpoint = 0.0)+
scale_color_gradient2(low="red",mid="grey",high="green",midpoint = 0.0)+
theme_bw()+
theme(axis.text.x=element_blank())+
facet_wrap(~Class,shrink=T,scale="free")
library(tidyverse)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
library(rJava)
require(foreign)
require(farff)
df=read.arff("https://archive.ics.uci.edu/ml/machine-learning-databases/00277/ThoraricSurgery.arff")
names(df)=c("Diagnosis","FVC","FEV1","Zubrod","Pain","Haemoptysis","Dyspnoea","Cough","Weakness","T_grade","DBtype2","MI","PAD","Smoking","Asthma","Age","Survival")
df$Survival=df$Survival%>%recode_factor(.,`F` = "Survived", `T` = "Dead")
df$Tiffneau=df$FEV1/df$FVC
library(caret)
set.seed(123)
idTrain=caret::createDataPartition(y=df$Survival,p=410/470,list=FALSE)
trainset=df[idTrain,]
testset=df[-idTrain,]
library(h2o)
h2o.init(nthreads = -1,max_mem_size ="4g")
wtrain=as.h2o(trainset)
wtest=as.h2o(testset)
response="Survival"
features=setdiff(colnames(wtrain),response)
rfmod=h2o.randomForest(x = features,
y = response,
training_frame = wtrain,nfolds=10,
fold_assignment = "Stratified",
ntrees = 200, max_depth = 50,sample_rate=0.5,mtries=4,
balance_classes = FALSE,
stopping_metric = "mean_per_class_error",
stopping_tolerance = 0.001,
stopping_rounds = 3,
keep_cross_validation_fold_assignment = F,
keep_cross_validation_predictions=F,
score_each_iteration = TRUE,
seed=12345)
h2o.performance(rfmod,wtrain)
h2o.performance(rfmod,wtest)
library(lime)
model_type.H2OModel<- function(x, ...) "classification"
predict_model.H2OModel <- function(x, newdata, type, ...) {
pred <- h2o.predict(x, as.h2o(newdata))
return(as.data.frame(pred[,-1]))
}
set.seed(12345)
explainer <- lime(trainset[,-17], rfmod, bin_continuous = FALSE, n_bins = 10, n_permutations = 10000)
library(magrittr)
library(dplyr)
deaddf=subset(testset,Survival!="Survived")%>%.[,-17]
survdf=subset(testset,Survival=="Survived")%>%.[,-17]
require(caret)
caseS1<-lime::explain(survdf[15,], explainer, labels="Survived", n_features =10,feature_select="auto")
plot_features(caseS1)
dead1<-lime::explain(deaddf[c(1:4),], explainer, labels="Dead",
n_features =10,feature_select="auto")
plot_features(dead1)
caseS1<-lime::explain(survdf[15,], explainer, labels="Survived", n_features =10,feature_select="auto")
plot_features(caseS1)
h2o.shutdown(prompt = TRUE)
y
h2o.shutdown(prompt = TRUE)
library(tidyverse)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
library(rJava)
require(foreign)
require(farff)
df=read.arff("https://archive.ics.uci.edu/ml/machine-learning-databases/00277/ThoraricSurgery.arff")
View(df)
View(df)
names(df)=c("Diagnosis","FVC","FEV1","Zubrod",
"Pain","Haemoptysis","Dyspnoea","Cough","Weakness",
"T_grade","DBtype2","MI","PAD","Smoking","Asthma","Age","Survival")
df$Survival=df$Survival%>%recode_factor(.,`F` = "Survived", `T` = "Dead")
df$Survivales=df$Survival%>%recode_factor(.,`F` = "Survived", `T` = "Dead")
df$Survivales=df$Survivala%>%recode_factor(.,`F` = "Survived", `T` = "Dead")
df$Survival=df$Survival%>%recode_factor(.,`F` = "Survived", `T` = "Dead")
install.packages("tensorflow")
install.packages("keras")
install.packages("kerasR")
library(tidyverse)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
library(rJava)
require(foreign)
require(farff)
df=read.arff("https://archive.ics.uci.edu/ml/machine-learning-databases/00277/ThoraricSurgery.arff")
names(df)=c("Diagnosis","FVC","FEV1","Zubrod",
"Pain","Haemoptysis","Dyspnoea","Cough","Weakness",
"T_grade","DBtype2","MI","PAD","Smoking","Asthma","Age","Survival")
view(df)
idTrain=caret::createDataPartition(y=df$Survival,p=450/470,list=FALSE)
View(idTrain)
View(idTrain)
idTrain=caret::createDataPartition(y=df$Survival,p=450/470,list=TRUE)
View(idTrain)
View(idTrain)
View(idTrain)
idTrain=caret::createDataPartition(y=df$Survival,p=450/470,list=FALSE)
View(idTrain)
View(idTrain)
trainset=df[idTrain,]
testset=df[-idTrain,]
ff("https://archive.ics.uci.edu/ml/machine-learning-databases/00277/ThoraricSurgery.arff")
library(caret)
library(tidyverse)
library(rJava)
require(foreign)
require(farff)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
df = read.arff("https://archive.ics.uci.edu/ml/machine-learning-databases/00277/ThoraricSurgery.arff")
library(caret)
library(tidyverse)
library(rJava)
require(foreign)
require(farff)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
df = read.arff("https://archive.ics.uci.edu/ml/machine-learning-databases/00277/ThoraricSurgery.arff")
View(df)
library(caret)
library(tidyverse)
library(rJava)
require(foreign)
require(farff)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
df = read.arff("https://archive.ics.uci.edu/ml/machine-learning-databases/00277/ThoraricSurgery.arff")
names(df)=c("Diagnosis","FVC","FEV1","Zubrod",
"Pain","Haemoptysis","Dyspnoea","Cough","Weakness",
"T_grade","DBtype2","MI","PAD","Smoking","Asthma","Age","Survival")
View(df)
library(keras)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tibble)
library(rJava)
library(keras)
library(dplyr)
require(foreign)
require(farff)
library(ggplot2)
library(tidyr)
library(tibble)
num_words <- 1000
imdb <- dataset_imdb(num_words = num_words)
Y
library(keras)
library(keras)
library(keras)
library(tidyr)
library(tibble)
library(tensorflow)
num_words <- 1000
imdb <- dataset_imdb(num_words = num_words)
c(train_data, train_labels) %<-% imdb$train
imdb <- dataset_imdb(num_words = num_words)
c(train_data, train_labels) %<-% imdb$train
library(caret)
library(tidyverse)
library(rJava)
require(foreign)
require(farff)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
df = read.arff("https://archive.ics.uci.edu/ml/machine-learning-databases/00277/ThoraricSurgery.arff")
names(df)=c("Diagnosis","FVC","FEV1","Zubrod",
"Pain","Haemoptysis","Dyspnoea","Cough","Weakness",
"T_grade","DBtype2","MI","PAD","Smoking","Asthma","Age","Survival")
View(df)
library(rJava)
library(keras)
library(dplyr)
require(foreign)
require(farff)
library(ggplot2)
library(tidyr)
library(tibble)
library(tensorflow)
num_words <- 1000
imdb <- dataset_imdb(num_words = num_words)
install_tensorflow()
library(rJava)
require(foreign)
require(farff)
library(ggplot2)
library(tidyr)
library(tibble)
library(tensorflow)
num_words <- 1000
imdb <- dataset_imdb(num_words = num_words)
imdb <- dataset_imdb(num_words = num_words)
c(train_data, train_labels) %<-% imdb$train
c(test_data, test_labels) %<-% imdb$test
imdb <- dataset_imdb(num_words = num_words)
c(train_data, train_labels) %<-% imdb$train
c(test_data, test_labels) %<-% imdb$test
library(keras)
library(dplyr)
require(foreign)
require(farff)
library(ggplot2)
library(tidyr)
library(tibble)
library(tensorflow)
num_words <- 1000
imdb <- dataset_imdb(num_words = num_words)
imdb <- dataset_imdb(num_words = num_words)
c(train_data, train_labels) %<-% imdb$train
c(test_data, test_labels) %<-% imdb$test
multi_hot_sequences <- function(sequences, dimension) {
multi_hot <- matrix(0, nrow = length(sequences), ncol = dimension)
for (i in 1:length(sequences)) {
multi_hot[i, sequences[[i]]] <- 1
}
multi_hot
}
train_data <- multi_hot_sequences(train_data, num_words)
test_data <- multi_hot_sequences(test_data, num_words)
first_text <- data.frame(word = 1:num_words, value = train_data[1, ])
ggplot(first_text, aes(x = word, y = value)) +
geom_line() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
library(dplyr)
rm(list = ls())
library(keras)
library(tensorflow)
library(ggplot2)
library(dplyr)
mnist <- dataset_mnist()
train_image <- mnist$train$x
train_label <- mnist$train$y
test_image <- mnist$test$x
test_label <- mnist$test$y
str(train_image)
str(train_label)
network <- keras_model_sequential() %>%
layer_dense(units = 52 , activation = "relu" , input_shape = c(28 * 28)) %>%
layer_dense(units = 10 , activation = "softmax")
library(tensorflow)
network <- keras_model_sequential() %>%
layer_dense(units = 52 , activation = "relu" , input_shape = c(28 * 28)) %>%
layer_dense(units = 10 , activation = "softmax")
network %>% compile( optimizer = "rmsprop",
loss = "categorical",
metrics = c("accuracy"))
train_image <- array_reshape(train_image , c(60000, 28*28))
train_image <- train_image / 255
test_image <- array_reshape(test_image , c(10000 , 28*28))
test_image <- test_image / 255
train_label <- to_categorical(train_label)
test_label <- to_categorical(test_label)
set.seed(123)
history <- network %>% fit(train_image, train_label,
epochs = 5,
batch_size = 128)
rm(list = ls())
library(keras)
library(tensorflow)
library(ggplot2)
library(dplyr)
mnist <- dataset_mnist()
train_image <- mnist$train$x
train_label <- mnist$train$y
test_image <- mnist$test$x
test_label <- mnist$test$y
str(train_image)
str(train_label)
network <- keras_model_sequential() %>%
layer_dense(units = 52 , activation = "relu" , input_shape = c(28 * 28)) %>%
layer_dense(units = 10 , activation = "softmax")
network %>% compile( optimizer = "rmsprop",
loss = "categorical",
metrics = c("accuracy"))
train_image <- array_reshape(train_image , c(60000, 28*28))
train_image <- train_image / 255
test_image <- array_reshape(test_image , c(10000 , 28*28))
test_image <- test_image / 255
train_label <- to_categorical(train_label)
test_label <- to_categorical(test_label)
set.seed(123)
history <- network %>% fit(train_image, train_label,
epochs = 5,
batch_size = 128)
install.packages("githubinstall")
library(gh)
df_train <- read.csv("WuhanVirus.csv")
library(tidyverse)
df_train <- read.csv("WuhanVirus.csv")
library(tidyverse)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
library(rJava)
library(keras)
library(dplyr)
require(foreign)
require(farff)
library(ggplot2)
library(tidyr)
library(tibble)
df_train <- read.csv("WuhanVirus.csv")
setwd('D:\Lesson\Machine Learning\R\Covid')
setwd("D:\Lesson\Machine Learning\R\Covid")
library(tidyverse)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
library(rJava)
library(keras)
library(dplyr)
require(foreign)
require(farff)
library(ggplot2)
library(tidyr)
library(tibble)
df=read.arff("https://archive.ics.uci.edu/ml/machine-learning-databases/00277/ThoraricSurgery.arff")
names(df)=c("Diagnosis","FVC","FEV1","Zubrod",
"Pain","Haemoptysis","Dyspnoea","Cough","Weakness",
"T_grade","DBtype2","MI","PAD","Smoking","Asthma","Age","Survival")
view(df)
df$Survival=df$Survival%>%recode_factor(.,`F` = "Survived", `T` = "Dead")
df$Tiffneau=df$FEV1/df$FVC
library(caret)
set.seed(123)
idTrain=caret::createDataPartition(y=df$Survival,p=450/470,list=FALSE)
trainset=df[idTrain,]
testset=df[-idTrain,]
library(h2o)
h2o.init(nthreads = -1,max_mem_size ="4g")
wtrain=as.h2o(trainset)
wtest=as.h2o(testset)
response="Survival"
features=setdiff(colnames(wtrain),response)
rfmod=h2o.randomForest(x = features,
y = response,
training_frame = wtrain,nfolds=10,
fold_assignment = "Stratified",
ntrees = 200, max_depth = 50,sample_rate=0.5,mtries=4,
balance_classes = FALSE,
stopping_metric = "mean_per_class_error",
stopping_tolerance = 0.001,
stopping_rounds = 3,
keep_cross_validation_fold_assignment = F,
keep_cross_validation_predictions=F,
score_each_iteration = TRUE,
seed=12345)
View(df)
df=read.arff("https://archive.ics.uci.edu/ml/machine-learning-databases/00277/ThoraricSurgery.arff")
library(tidyverse)
library(tibble)
library(explore)
library(dataMaid)
library(summarytools)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
library(rJava)
setwd("C:/Users/Hendrich/Desktop/Professional Internship/Death")
library(keras)
library(dplyr)
require(foreign)
require(farff)
library(ggplot2)
library(tidyr)
library(tibble)
df=read.arff("Death.arff")
View(df)
View(df)
library(tidyverse)
library(tibble)
library(explore)
library(dataMaid)
library(summarytools)
Sys.setenv(JAVA_HOME="D:\\ZZZ Program Files\\Java")
library(rJava)
setwd("C:/Users/Hendrich/Desktop/Professional Internship/Death")
library(keras)
library(dplyr)
require(foreign)
require(farff)
library(ggplot2)
library(tidyr)
df=read.arff("Death.arff")
names(df)=c("Level","FVC","FEV1","Zubrod",
"Pain","Haemoptysis","Sultry","Cough","Weakness",
"T_grade","DBtype2","MI","PAD","Smoking","Asthma","Age","Survival")
view(df)
df$Survival=df$Survival%>%recode_factor(.,`F` = "Survived", `T` = "Dead")
df$Tiffneau=df$FEV1/df$FVC
